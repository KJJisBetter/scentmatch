name: Test Suite

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: '22'
  # Test environment variables
  NEXT_PUBLIC_SUPABASE_URL: 'https://test.supabase.co'
  NEXT_PUBLIC_SUPABASE_ANON_KEY: 'test-anon-key'
  SUPABASE_SERVICE_ROLE_KEY: 'test-service-role-key'

jobs:
  # Validation job - ensures testing framework is working
  validate-setup:
    name: Validate Testing Framework
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Validate testing framework
        run: npm run validate:setup

      - name: Check TypeScript compilation
        run: npm run type-check

  # Unit and integration tests
  test:
    name: Unit & Integration Tests
    runs-on: ubuntu-latest
    needs: validate-setup
    strategy:
      matrix:
        test-type: ['unit', 'integration']

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ${{ matrix.test-type }} tests
        run: npm run test:${{ matrix.test-type }}

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.test-type }}
          path: test-results.xml

  # Coverage testing with thresholds
  coverage:
    name: Test Coverage
    runs-on: ubuntu-latest
    needs: validate-setup

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests with coverage
        run: npm run test:coverage:threshold

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage/

      - name: Comment coverage on PR
        if: github.event_name == 'pull_request'
        uses: 5monkeys/cobertura-action@master
        with:
          path: coverage/cobertura-coverage.xml
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          minimum_coverage: 80

  # Accessibility testing
  accessibility:
    name: Accessibility Tests
    runs-on: ubuntu-latest
    needs: validate-setup

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run accessibility tests
        run: npm run test:a11y

      - name: Upload accessibility results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: accessibility-results
          path: test-results.xml

  # Performance testing with Lighthouse
  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: validate-setup

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Start application
        run: |
          npm start &
          sleep 30
          curl -f http://localhost:3000 || exit 1

      - name: Run performance tests
        run: npm run test:performance

      - name: Run Lighthouse mobile audit
        run: npm run lighthouse:mobile

      - name: Upload performance results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: performance-results
          path: lighthouse-results/

      - name: Performance regression check
        run: |
          # This would compare current performance metrics to baseline
          echo "Performance regression check (placeholder)"

  # Security and linting
  quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Run TypeScript checks
        run: npm run type-check

      - name: Security audit
        run: npm audit --audit-level=moderate

      - name: Check for dependency vulnerabilities
        run: npx audit-ci --moderate

  # Comprehensive test summary
  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [test, coverage, accessibility, performance, quality]
    if: always()

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: test-artifacts

      - name: Generate test summary
        run: |
          echo "# Test Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Test Results" >> $GITHUB_STEP_SUMMARY
          echo "- Unit Tests: ${{ needs.test.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Integration Tests: ${{ needs.test.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Coverage: ${{ needs.coverage.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Accessibility: ${{ needs.accessibility.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Performance: ${{ needs.performance.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Code Quality: ${{ needs.quality.result }}" >> $GITHUB_STEP_SUMMARY

      - name: Check overall status
        run: |
          if [[ "${{ needs.test.result }}" == "success" && 
                "${{ needs.coverage.result }}" == "success" && 
                "${{ needs.accessibility.result }}" == "success" && 
                "${{ needs.performance.result }}" == "success" && 
                "${{ needs.quality.result }}" == "success" ]]; then
            echo "✅ All tests passed!"
          else
            echo "❌ Some tests failed!"
            exit 1
          fi
